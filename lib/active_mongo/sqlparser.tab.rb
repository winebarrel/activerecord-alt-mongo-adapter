#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "sqlparser.y".
#

require 'racc/parser'



require 'strscan'

module ActiveMongo


class SQLParser < Racc::Parser

module_eval <<'..end sqlparser.y modeval..idb280b00f18', 'sqlparser.y', 219

KEYWORDS = %w(
  AND
  AS
  ASC
  BETWEEN
  BY
  COUNT
  DELETE
  DESC
  DISTINCT
  EXISTS
  FROM
  IN
  INSERT
  INTO
  LIMIT
  MOD
  NOT
  OFFSET
  ORDER
  REGEXP
  SELECT
  SET
  UPDATE
  VALUES
  WHERE
)

KEYWORD_REGEXP = Regexp.compile("(?:#{KEYWORDS.join '|'})\\b", Regexp::IGNORECASE)

def initialize(obj)
  src = obj.is_a?(IO) ? obj.read : obj.to_s
  @ss = StringScanner.new(src)
end

def scan
  piece = nil

  until @ss.eos?
    if (tok = @ss.scan /\s+/)
      # nothing to do
    elsif (tok = @ss.scan /(?:<>|!=|>=|<=|>|<|=)/)
      yield tok, tok
    elsif (tok = @ss.scan KEYWORD_REGEXP)
      yield tok.upcase.to_sym, tok
    elsif (tok = @ss.scan /NULL\b/i)
      yield :NULL, nil
    elsif (tok = @ss.scan /'(?:[^']|'')*'/) #'
      yield :STRING, tok.slice(1...-1).gsub(/''/, "'")
    elsif (tok = @ss.scan /-?(?:0|[1-9]\d*)(?:\.\d+)/)
      yield :NUMBER, tok.to_f
    elsif (tok = @ss.scan /-?(?:0|[1-9]\d*)/)
      yield :NUMBER, tok.to_i
    elsif (tok = @ss.scan /[,\(\)\*]/)
      yield tok, tok
    elsif (tok = @ss.scan /(?:[a-z_]\w+\.|[a-z]\.)*ID\b/i)
      yield :ID, tok
    elsif (tok = @ss.scan /(?:[a-z_]\w+\.|[a-z]\.)*(?:[a-z_]\w+|[a-z])/i)
      yield :IDENTIFIER, tok
    else
      raise Racc::ParseError, ('parse error on value "%s"' % @ss.rest.inspect)
    end
  end

  yield false, '$'
end
private :scan

def parse
  yyparse self, :scan
end

..end sqlparser.y modeval..idb280b00f18

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 10, 45, :_reduce_5,
 8, 46, :_reduce_6,
 6, 46, :_reduce_7,
 8, 46, :_reduce_8,
 4, 57, :_reduce_9,
 6, 57, :_reduce_10,
 1, 58, :_reduce_none,
 1, 58, :_reduce_none,
 1, 52, :_reduce_13,
 1, 52, :_reduce_none,
 0, 53, :_reduce_15,
 2, 53, :_reduce_16,
 2, 53, :_reduce_17,
 1, 59, :_reduce_none,
 3, 59, :_reduce_19,
 3, 61, :_reduce_20,
 5, 61, :_reduce_21,
 1, 60, :_reduce_22,
 3, 60, :_reduce_23,
 1, 63, :_reduce_none,
 3, 63, :_reduce_25,
 3, 64, :_reduce_26,
 4, 64, :_reduce_27,
 5, 64, :_reduce_28,
 6, 64, :_reduce_29,
 1, 64, :_reduce_none,
 1, 64, :_reduce_none,
 5, 66, :_reduce_32,
 6, 67, :_reduce_33,
 0, 54, :_reduce_34,
 4, 54, :_reduce_35,
 0, 68, :_reduce_36,
 1, 68, :_reduce_none,
 0, 55, :_reduce_38,
 2, 55, :_reduce_39,
 0, 56, :_reduce_40,
 2, 56, :_reduce_41,
 5, 47, :_reduce_42,
 1, 70, :_reduce_none,
 3, 70, :_reduce_44,
 3, 71, :_reduce_45,
 4, 48, :_reduce_46,
 1, 49, :_reduce_none,
 1, 50, :_reduce_48,
 3, 50, :_reduce_49,
 1, 62, :_reduce_none,
 1, 62, :_reduce_none,
 1, 62, :_reduce_none,
 1, 51, :_reduce_53,
 3, 51, :_reduce_54,
 1, 65, :_reduce_55,
 1, 65, :_reduce_56,
 1, 65, :_reduce_57,
 1, 65, :_reduce_58,
 1, 65, :_reduce_59,
 1, 65, :_reduce_60,
 1, 65, :_reduce_61,
 1, 65, :_reduce_62,
 1, 65, :_reduce_63,
 1, 65, :_reduce_64,
 1, 65, :_reduce_65,
 1, 69, :_reduce_66,
 1, 69, :_reduce_67 ]

racc_reduce_n = 68

racc_shift_n = 140

racc_action_table = [
   102,   126,   117,   129,    98,    31,    71,     3,    69,    70,
   133,   134,     9,    13,    62,    13,    88,   136,   138,    65,
    56,    65,    71,   125,    63,   125,    67,    68,    67,    68,
     5,    13,    50,     8,    78,    81,    56,    84,    85,   125,
   125,   139,    28,    27,    41,    88,    27,    13,    71,    13,
    51,    86,    74,    75,    76,    77,    79,    80,    82,    83,
    50,    13,    56,   125,    56,    78,    81,    35,    90,    65,
    90,    20,    21,    13,    15,    13,    67,    68,    35,    94,
    95,    45,    86,    74,    75,    76,    77,    79,    80,    82,
    83,    13,    65,    35,    65,    97,    65,    26,    65,    67,
    68,    67,    68,    67,    68,    67,    68,    65,    13,    65,
    99,    65,   100,    65,    67,    68,    67,    68,    67,    68,
    67,    68,    65,    35,    13,    24,    13,   106,   107,    67,
    68,   107,    13,   111,    30,    22,   115,    47,    13,    13,
   120,   122,   122,    40,    14,    13,    13,    13,    13,    35,
   135,    11,    13,    10,   114 ]

racc_action_check = [
    87,   113,   105,   116,    72,    23,    71,     0,    50,    50,
   119,   119,     0,    45,    42,    40,    72,   124,   127,    87,
    71,   105,    51,   113,    44,   116,    87,    87,   105,   105,
     0,    71,    51,     0,    53,    53,    51,    53,    53,   124,
   127,   130,    19,    18,    30,    54,    44,    51,    88,    56,
    35,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    35,    30,    88,   130,    35,    89,    89,    32,    59,   115,
    60,     9,     9,    88,     9,    35,   115,   115,    61,    62,
    63,    32,    89,    89,    89,    89,    89,    89,    89,    89,
    89,     9,   114,    39,   111,    70,    47,    16,   117,   114,
   114,   111,   111,    47,    47,   117,   117,   125,    20,    69,
    73,    97,    84,    85,   125,   125,    69,    69,    97,    97,
    85,    85,   102,    37,    14,    12,    11,    90,    91,   102,
   102,    92,    94,    95,    21,    10,   101,    33,    31,   106,
   107,   108,   109,    29,     8,    28,    27,     5,    26,    25,
   122,     3,    24,     1,   100 ]

racc_action_pointer = [
     5,   153,   nil,   148,   nil,   118,   nil,   nil,   136,    62,
   135,    97,    99,   nil,    95,   nil,    89,   nil,    16,    34,
    79,   130,   nil,     1,   123,   136,   119,   117,   116,   135,
    32,   109,    54,   122,   nil,    46,   nil,   110,   nil,    80,
   -14,   nil,     9,   nil,    19,   -16,   nil,    73,   nil,   nil,
    -7,    18,   nil,    19,    28,   nil,    20,   nil,   nil,    48,
    50,    65,    68,    74,   nil,   nil,   nil,   nil,   nil,    86,
    91,     2,    -1,   105,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    96,    90,   nil,    -4,    44,    50,
   106,   106,   109,   nil,   103,   129,   nil,    88,   nil,   nil,
   150,   119,    99,   nil,   nil,    -2,   110,   117,   117,   118,
   nil,    71,   nil,    -4,    69,    46,    -2,    75,   nil,   -31,
   nil,   nil,   127,   nil,    12,    84,   nil,    13,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -68,   -68,    -1,   -68,    -2,   -68,    -3,    -4,   -68,   -68,
   -68,   -68,   -68,   -47,   -68,   -13,   -68,   -48,   -14,   -68,
   -68,   -68,   140,   -68,   -68,   -15,   -68,   -68,   -68,   -68,
   -68,   -68,   -15,   -68,   -43,   -68,   -46,   -15,   -49,   -15,
   -68,   -11,   -68,   -12,   -68,   -68,   -42,   -68,   -30,   -31,
   -68,   -68,   -16,   -68,   -17,   -18,   -68,   -22,   -24,   -34,
   -34,   -15,    -9,   -68,   -44,   -51,   -45,   -50,   -52,   -68,
   -68,   -68,   -68,   -68,   -57,   -58,   -59,   -60,   -65,   -61,
   -62,   -55,   -63,   -64,   -68,   -68,   -56,   -68,   -68,   -68,
   -68,   -38,   -38,    -7,   -68,   -68,   -20,   -68,   -25,   -19,
   -68,   -68,   -68,   -26,   -23,   -68,   -68,   -68,   -40,   -40,
   -10,   -68,   -53,   -68,   -68,   -68,   -68,   -68,   -27,   -36,
   -39,    -8,   -68,    -6,   -68,   -68,   -21,   -68,   -32,   -28,
   -68,   -35,   -37,   -66,   -67,   -41,    -5,   -54,   -33,   -29 ]

racc_goto_table = [
    12,    87,    55,    19,    17,    66,    23,    34,    18,    25,
   108,   109,    91,    92,     7,    29,    16,    36,    73,    33,
    42,    37,    38,    39,    46,    43,    17,    96,    64,    59,
    44,    60,   121,   123,    52,    61,    54,   105,     6,     4,
    33,   113,   104,   101,     2,   103,   116,   131,   132,    32,
     1,    89,   nil,    93,   nil,   124,   nil,   nil,   127,   nil,
   nil,   130,   nil,   118,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   128,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   137,   nil,   nil,   nil,   nil,   nil,   110,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   119 ]

racc_goto_check = [
     6,    22,    18,     9,     6,    19,     6,    28,     7,     6,
    12,    12,    11,    11,     5,     6,    14,    10,    18,     6,
    15,     6,     6,     6,    10,     6,     6,    19,    28,    10,
     7,    10,    13,    13,    16,     6,    17,    22,     4,     3,
     6,     8,    20,    19,     2,    19,     8,    25,    26,    27,
     1,     6,   nil,    10,   nil,     8,   nil,   nil,     8,   nil,
   nil,     8,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6 ]

racc_goto_pointer = [
   nil,    50,    44,    39,    38,    14,    -5,    -1,   -56,    -6,
    -8,   -47,   -81,   -76,     7,   -10,    -1,     1,   -33,   -42,
   -46,   nil,   -52,   nil,   nil,   -72,   -71,    25,   -17 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    53,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    72,   nil,   112,
    57,    58,   nil,    48,    49,   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :INSERT => 2,
 :INTO => 3,
 "(" => 4,
 ")" => 5,
 :VALUES => 6,
 :SELECT => 7,
 :FROM => 8,
 :DISTINCT => 9,
 :COUNT => 10,
 :AS => 11,
 "*" => 12,
 :WHERE => 13,
 :ID => 14,
 "=" => 15,
 :IN => 16,
 :AND => 17,
 :NOT => 18,
 :BETWEEN => 19,
 :ORDER => 20,
 :BY => 21,
 :LIMIT => 22,
 :NUMBER => 23,
 :OFFSET => 24,
 :UPDATE => 25,
 :SET => 26,
 "," => 27,
 :DELETE => 28,
 :IDENTIFIER => 29,
 :STRING => 30,
 :NULL => 31,
 :REGEXP => 32,
 :MOD => 33,
 :EXISTS => 34,
 "<>" => 35,
 "!=" => 36,
 ">=" => 37,
 "<=" => 38,
 ">" => 39,
 "<" => 40,
 :ASC => 41,
 :DESC => 42 }

racc_use_result_var = false

racc_nt_base = 43

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'INSERT',
'INTO',
'"("',
'")"',
'VALUES',
'SELECT',
'FROM',
'DISTINCT',
'COUNT',
'AS',
'"*"',
'WHERE',
'ID',
'"="',
'IN',
'AND',
'NOT',
'BETWEEN',
'ORDER',
'BY',
'LIMIT',
'NUMBER',
'OFFSET',
'UPDATE',
'SET',
'","',
'DELETE',
'IDENTIFIER',
'STRING',
'NULL',
'REGEXP',
'MOD',
'EXISTS',
'"<>"',
'"!="',
'">="',
'"<="',
'">"',
'"<"',
'ASC',
'DESC',
'$start',
'sql',
'create_statement',
'read_statemant',
'update_statemant',
'delete_statemant',
'id',
'id_list',
'value_list',
'select_list',
'where_clause',
'order_by_clause',
'limit_clause',
'offset_clause',
'count_clause',
'count_arg',
'id_search_condition',
'search_condition',
'id_predicate',
'value',
'boolean_primary',
'predicate',
'op',
'between_predicate',
'not_in_predicate',
'ordering_spec',
'order_spec',
'set_clause_list',
'set_clause']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

 # reduce 2 omitted

 # reduce 3 omitted

 # reduce 4 omitted

module_eval <<'.,.,', 'sqlparser.y', 12
  def _reduce_5( val, _values)
                            {:command => :insert, :table => val[2], :column_list => val[4], :value_list => val[8]}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 17
  def _reduce_6( val, _values)
                            {:command => :select, :table => val[3], :select_list => val[1], :condition => val[4], :order => val[5], :limit => val[6], :offset => val[7]}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 21
  def _reduce_7( val, _values)
                            {:command => :select, :table => val[4], :select_list => val[2], :distinct => val[2], :condition => val[5]}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 25
  def _reduce_8( val, _values)
                            {:command => :select, :table => val[3], :count => val[1], :condition => val[4], :order => val[5], :limit => val[6], :offset => val[7]}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 30
  def _reduce_9( val, _values)
                            "count_all"
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 34
  def _reduce_10( val, _values)
                            val[5]
  end
.,.,

 # reduce 11 omitted

 # reduce 12 omitted

module_eval <<'.,.,', 'sqlparser.y', 42
  def _reduce_13( val, _values)
                            []
  end
.,.,

 # reduce 14 omitted

module_eval <<'.,.,', 'sqlparser.y', 48
  def _reduce_15( val, _values)
                            []
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 52
  def _reduce_16( val, _values)
                            val[1]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 56
  def _reduce_17( val, _values)
                            val[1]
  end
.,.,

 # reduce 18 omitted

module_eval <<'.,.,', 'sqlparser.y', 62
  def _reduce_19( val, _values)
                            val[1]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 67
  def _reduce_20( val, _values)
                            val[2]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 71
  def _reduce_21( val, _values)
                            val[3]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 76
  def _reduce_22( val, _values)
                            [val[0]].flatten
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 80
  def _reduce_23( val, _values)
                            (val[0] << val[2]).flatten
  end
.,.,

 # reduce 24 omitted

module_eval <<'.,.,', 'sqlparser.y', 86
  def _reduce_25( val, _values)
                            val[1]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 91
  def _reduce_26( val, _values)
                            {:name => val[0], :op => val[1], :expr => val[2]}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 95
  def _reduce_27( val, _values)
                            {:name => val[1], :op => val[2], :expr => val[3], :not => true}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 99
  def _reduce_28( val, _values)
                            {:name => val[0], :op => val[1], :expr => val[3]}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 103
  def _reduce_29( val, _values)
                            {:name => val[1], :op => val[2], :expr => val[4], :not => true}
  end
.,.,

 # reduce 30 omitted

 # reduce 31 omitted

module_eval <<'.,.,', 'sqlparser.y', 110
  def _reduce_32( val, _values)
                            {:name => val[0], :op => '$bt', :expr => [val[2], val[4]]}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 115
  def _reduce_33( val, _values)
                            {:name => val[0], :op => '$nin', :expr => val[4]}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 120
  def _reduce_34( val, _values)
                            nil
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 124
  def _reduce_35( val, _values)
                            {:name => val[2], :type => val[3]}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 129
  def _reduce_36( val, _values)
                            :asc
  end
.,.,

 # reduce 37 omitted

module_eval <<'.,.,', 'sqlparser.y', 135
  def _reduce_38( val, _values)
                            nil
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 139
  def _reduce_39( val, _values)
                            val[1]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 144
  def _reduce_40( val, _values)
                            nil
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 148
  def _reduce_41( val, _values)
                            val[1]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 153
  def _reduce_42( val, _values)
                            {:command => :update, :table => val[1], :set_clause_list => val[3], :condition => val[4]}
  end
.,.,

 # reduce 43 omitted

module_eval <<'.,.,', 'sqlparser.y', 159
  def _reduce_44( val, _values)
                            val[0].merge val[2]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 164
  def _reduce_45( val, _values)
                          {val[0] => val[2]}
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 169
  def _reduce_46( val, _values)
                            {:command => :delete, :table => val[2], :condition => val[3]}
  end
.,.,

 # reduce 47 omitted

module_eval <<'.,.,', 'sqlparser.y', 176
  def _reduce_48( val, _values)
                            [val[0]]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 180
  def _reduce_49( val, _values)
                            val[0] << val[2]
  end
.,.,

 # reduce 50 omitted

 # reduce 51 omitted

 # reduce 52 omitted

module_eval <<'.,.,', 'sqlparser.y', 189
  def _reduce_53( val, _values)
                            [val[0]]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 193
  def _reduce_54( val, _values)
                            val[0] << val[2]
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 194
  def _reduce_55( val, _values)
 '$in'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 195
  def _reduce_56( val, _values)
 '$regexp'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 196
  def _reduce_57( val, _values)
 '$mod'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 197
  def _reduce_58( val, _values)
 '$exists'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 198
  def _reduce_59( val, _values)
 '$ne'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 199
  def _reduce_60( val, _values)
 '$ne'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 200
  def _reduce_61( val, _values)
 '$gte'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 201
  def _reduce_62( val, _values)
 '$lte'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 202
  def _reduce_63( val, _values)
 '$gt'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 203
  def _reduce_64( val, _values)
 '$lt'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 204
  def _reduce_65( val, _values)
 '$eq'
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 206
  def _reduce_66( val, _values)
 :asc
  end
.,.,

module_eval <<'.,.,', 'sqlparser.y', 207
  def _reduce_67( val, _values)
 :desc
  end
.,.,

 def _reduce_none( val, _values)
  val[0]
 end

end   # class SQLParser


end # module ActiveMongo
